


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             code_area, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 00000450 
                       float_number_series
                               EQU              0x0450
    5 00000000 00018AEC 
                       sorted_number_series
                               EQU              0x00018AEC  ;101100
    6 00000000 00031190 
                       final_result_series
                               EQU              0x00031190  ;201104
    7 00000000         
    8 00000000         ;========== Do not change this area ===========
    9 00000000         
   10 00000000         initialization
   11 00000000 E59F0208        LDR              r0, =0xDEADBEEF ; seed for rand
                                                            om number
   12 00000004 E3A01E45        LDR              r1, =float_number_series
   13 00000008 E59F2204        LDR              r2, =10000  ; The number of ele
                                                            ment in stored sere
                                                            is
   14 0000000C E59F3204        LDR              r3, =0x0EACBA90 ; constant for 
                                                            random number
   15 00000010         
   16 00000010         save_float_series
   17 00000010 E3520000        CMP              r2, #0
   18 00000014 0A00000F        BEQ              is_init
   19 00000018 EB000003        BL               random_float_number
   20 0000001C E4810004        STR              r0, [r1], #4
   21 00000020 E2422001        SUB              r2, r2, #1
   22 00000024 E3A05000        MOV              r5, #0
   23 00000028 EAFFFFF8        B                save_float_series
   24 0000002C         
   25 0000002C         random_float_number
   26 0000002C E1A0500E        MOV              r5, LR
   27 00000030 E0200003        EOR              r0, r0, r3
   28 00000034 E0203163        EOR              r3, r0, r3, ROR #2 ; ex) 0000 1
                                                            011 -> 1100 0010
   29 00000038 E1500001        CMP              r0, r1
   30 0000003C AB000001        BLGE             shift_left
   31 00000040 BB000002        BLLT             shift_right
   32 00000044 E12FFF15        BX               r5
   33 00000048         
   34 00000048         shift_left
   35 00000048 E1A00080        LSL              r0, r0, #1
   36 0000004C E12FFF1E        BX               LR
   37 00000050         
   38 00000050         shift_right
   39 00000050 E1A000A0        LSR              r0, r0, #1
   40 00000054 E12FFF1E        BX               LR
   41 00000058         
   42 00000058         ;============================================
   43 00000058         
   44 00000058         ;========== Start your code here ===========
   45 00000058         
   46 00000058         is_init
   47 00000058 E3A01001        MOV              r1, #1
   48 0000005C E59FB1B0        LDR              r11, =10000



ARM Macro Assembler    Page 2 


   49 00000060 EAFFFFFF        B                sorting     ;Excepting function
                                                             of NaN
   50 00000064         
   51 00000064         sorting
   52 00000064 E3A00E45        LDR              r0, =float_number_series
   53 00000068 E1A0A101        MOV              r10, r1,LSL#2
   54 0000006C E1A0C001        MOV              r12, r1
   55 00000070 E080000A        ADD              r0, r0, r10
   56 00000074 E35B0000        CMP              r11, #0
   57 00000078 1A000001        BNE              sort_loop
   58 0000007C E35B0000        CMP              r11, #0
   59 00000080 0A000058        BEQ              is_str
   60 00000084         
   61 00000084         sort_loop
   62 00000084 E35C0000        CMP              r12, #0
   63 00000088 02811001        ADDEQ            r1, r1, #1
   64 0000008C         
   65 0000008C E35C0000        CMP              r12, #0
   66 00000090 0AFFFFF3        BEQ              sorting
   67 00000094         
   68 00000094 E5902000        LDR              r2, [r0]    ;r2 : key
   69 00000098         
   70 00000098 E1A04FA2        MOV              r4, r2, LSR#31 ;sign bit
   71 0000009C         
   72 0000009C E1A05082        MOV              r5, r2, LSL#1
   73 000000A0 E1A05C25        MOV              r5, r5, LSR#24 ;exponent
   74 000000A4         
   75 000000A4 E1A06482        MOV              r6, r2, LSL#9
   76 000000A8 E1A064A6        MOV              r6, r6, LSR#9 ;fraction
   77 000000AC         
   78 000000AC E2400004        SUB              r0, r0, #4
   79 000000B0 E5903000        LDR              r3, [r0]
   80 000000B4         
   81 000000B4 E1A07FA3        MOV              r7, r3, LSR#31 ;sign bit
   82 000000B8         
   83 000000B8 E1A08083        MOV              r8, r3, LSL#1
   84 000000BC E1A08C28        MOV              r8, r8, LSR#24 ;exponent
   85 000000C0         
   86 000000C0 E1A09483        MOV              r9, r3, LSL#9
   87 000000C4 E1A094A9        MOV              r9, r9, LSR#9 ;fraction
   88 000000C8         
   89 000000C8 E1540007        CMP              r4, r7
   90 000000CC         ;compare sign bit
   91 000000CC         ;GT : r2 = 1 & r3 = 0 (r2 is neg num & r3 is pos num)
   92 000000CC         ;LT : r2 = 0 & r3 = 1 (r2 is pos num & r3 is neg num)
   93 000000CC C5802000        STRGT            r2, [r0]    ;if key value is lo
                                                            wer than target swa
                                                            p two values
   94 000000D0 E1540007        CMP              r4, r7
   95 000000D4 C5803004        STRGT            r3, [r0,#4]
   96 000000D8 E1540007        CMP              r4, r7
   97 000000DC C24CC001        SUBGT            r12, r12, #1
   98 000000E0 E1540007        CMP              r4, r7
   99 000000E4 CAFFFFE6        BGT              sort_loop
  100 000000E8 E1540007        CMP              r4, r7
  101 000000EC B24BB001        SUBLT            r11, r11, #1
  102 000000F0 E1540007        CMP              r4, r7
  103 000000F4 B2811001        ADDLT            r1, r1, #1
  104 000000F8 E1540007        CMP              r4, r7



ARM Macro Assembler    Page 3 


  105 000000FC BAFFFFD8        BLT              sorting     ;if key value is hi
                                                            gher than target, e
                                                            scape loop & compar
                                                            e next key
  106 00000100         
  107 00000100         ;if both are negative
  108 00000100 E3540001        CMP              r4,#1
  109 00000104 0A000001        BEQ              n_sort_exp
  110 00000108         
  111 00000108         ;if both are positive
  112 00000108 E3540000        CMP              r4,#0
  113 0000010C 0A00001A        BEQ              p_sort_exp
  114 00000110         
  115 00000110         ;exponent compare function of two negative numbers
  116 00000110         n_sort_exp
  117 00000110 E1550008        CMP              r5, r8      ;compare exponent
  118 00000114 C5802000        STRGT            r2, [r0]    ;if r2 has bigger e
                                                            xponent, swap them
  119 00000118 E1550008        CMP              r5, r8
  120 0000011C C5803004        STRGT            r3, [r0,#4]
  121 00000120 E1550008        CMP              r5, r8
  122 00000124 C24CC001        SUBGT            r12, r12, #1
  123 00000128 E1550008        CMP              r5, r8
  124 0000012C CAFFFFD4        BGT              sort_loop
  125 00000130 E1550008        CMP              r5, r8
  126 00000134 B24BB001        SUBLT            r11, r11, #1
  127 00000138 E1550008        CMP              r5, r8
  128 0000013C B2811001        ADDLT            r1, r1, #1  ;if r3 has bigger e
                                                            xponent, sort next 
                                                            key
  129 00000140 E1550008        CMP              r5, r8
  130 00000144 BAFFFFC6        BLT              sorting
  131 00000148 E1550008        CMP              r5, r8
  132 0000014C 0AFFFFFF        BEQ              n_sort_frac ;if exponents are s
                                                            ame, then compare f
                                                            raction
  133 00000150         
  134 00000150         ;fraction compare function of two negative numbers
  135 00000150         n_sort_frac
  136 00000150 E1560009        CMP              r6, r9
  137 00000154 C5802000        STRGT            r2, [r0]    ;if r2 is greater, 
                                                            swap them
  138 00000158 E1560009        CMP              r6, r9
  139 0000015C C4803004        STRGT            r3, [r0],#4
  140 00000160 E1560009        CMP              r6, r9
  141 00000164 C24CC001        SUBGT            r12, r12, #1
  142 00000168 E1560009        CMP              r6, r9
  143 0000016C CAFFFFC4        BGT              sort_loop
  144 00000170 E24BB001        SUB              r11, r11, #1
  145 00000174 E2811001        ADD              r1, r1, #1  ;if r3 is greater o
                                                            r Equal, sort next 
                                                            key
  146 00000178 EAFFFFB9        B                sorting
  147 0000017C         
  148 0000017C         ;exponent compare function of two positive numbers
  149 0000017C         p_sort_exp
  150 0000017C E1550008        CMP              r5, r8      ;compare exponent
  151 00000180 B5802000        STRLT            r2, [r0]    ;if exponent of r3 
                                                            is greater, swap th



ARM Macro Assembler    Page 4 


                                                            em
  152 00000184 E1550008        CMP              r5, r8
  153 00000188 B5803004        STRLT            r3, [r0, #4]
  154 0000018C E1550008        CMP              r5, r8
  155 00000190 B24CC001        SUBLT            r12, r12, #1
  156 00000194 E1550008        CMP              r5, r8
  157 00000198 BAFFFFB9        BLT              sort_loop
  158 0000019C E1550008        CMP              r5, r8
  159 000001A0 C24BB001        SUBGT            r11, r11, #1
  160 000001A4 E1550008        CMP              r5, r8
  161 000001A8 C2811001        ADDGT            r1, r1, #1  ;if exponent of r2 
                                                            is greater, sort ne
                                                            xt key
  162 000001AC E1550008        CMP              r5, r8
  163 000001B0 CAFFFFAB        BGT              sorting
  164 000001B4 E1550008        CMP              r5, r8
  165 000001B8 0AFFFFFF        BEQ              p_sort_frac ;if two exponents a
                                                            re same, compare fr
                                                            action
  166 000001BC         
  167 000001BC         ;fraction compare function of two positive numbers
  168 000001BC         p_sort_frac
  169 000001BC E1560009        CMP              r6, r9
  170 000001C0 B5802000        STRLT            r2, [r0]    ;if fraction of r3 
                                                            is greater than r3,
                                                             swap
  171 000001C4 E1560009        CMP              r6, r9
  172 000001C8 B5803004        STRLT            r3, [r0,#4]
  173 000001CC E1560009        CMP              r6, r9
  174 000001D0 B24CC001        SUBLT            r12, r12, #1
  175 000001D4 E1560009        CMP              r6, r9
  176 000001D8 BAFFFFA9        BLT              sort_loop
  177 000001DC E24BB001        SUB              r11, r11, #1
  178 000001E0 E2811001        ADD              r1, r1, #1  ;if fraction of r2 
                                                            is greater than or 
                                                            Equal to r2, sort n
                                                            ext key
  179 000001E4 EAFFFF9E        B                sorting
  180 000001E8         
  181 000001E8         is_str
  182 000001E8 E3A00E45        LDR              r0, =float_number_series
  183 000001EC E59F1028        LDR              r1, =final_result_series
  184 000001F0 E59F201C        LDR              r2, =10000
  185 000001F4 EAFFFFFF        B                is_str_loop
  186 000001F8         
  187 000001F8         is_str_loop
  188 000001F8 E3520000        CMP              r2, #0
  189 000001FC 0A000003        BEQ              exit
  190 00000200         
  191 00000200 E4903004        LDR              r3, [r0], #4
  192 00000204 E4813004        STR              r3, [r1], #4
  193 00000208 E2422001        SUB              r2, r2, #1
  194 0000020C EAFFFFF9        B                is_str_loop
  195 00000210         
  196 00000210         exit
  197 00000210                 END
              DEADBEEF 
              00002710 
              0EACBA90 



ARM Macro Assembler    Page 5 


              00031190 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\source_2.d -o.\objects\source_2.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\source_2.lst source_2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

code_area 00000000

Symbol: code_area
   Definitions
      At line 1 in file source_2.s
   Uses
      None
Comment: code_area unused
exit 00000210

Symbol: exit
   Definitions
      At line 196 in file source_2.s
   Uses
      At line 189 in file source_2.s
Comment: exit used once
initialization 00000000

Symbol: initialization
   Definitions
      At line 10 in file source_2.s
   Uses
      None
Comment: initialization unused
is_init 00000058

Symbol: is_init
   Definitions
      At line 46 in file source_2.s
   Uses
      At line 18 in file source_2.s
Comment: is_init used once
is_str 000001E8

Symbol: is_str
   Definitions
      At line 181 in file source_2.s
   Uses
      At line 59 in file source_2.s
Comment: is_str used once
is_str_loop 000001F8

Symbol: is_str_loop
   Definitions
      At line 187 in file source_2.s
   Uses
      At line 185 in file source_2.s
      At line 194 in file source_2.s

n_sort_exp 00000110

Symbol: n_sort_exp
   Definitions
      At line 116 in file source_2.s
   Uses
      At line 109 in file source_2.s
Comment: n_sort_exp used once
n_sort_frac 00000150




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: n_sort_frac
   Definitions
      At line 135 in file source_2.s
   Uses
      At line 132 in file source_2.s
Comment: n_sort_frac used once
p_sort_exp 0000017C

Symbol: p_sort_exp
   Definitions
      At line 149 in file source_2.s
   Uses
      At line 113 in file source_2.s
Comment: p_sort_exp used once
p_sort_frac 000001BC

Symbol: p_sort_frac
   Definitions
      At line 168 in file source_2.s
   Uses
      At line 165 in file source_2.s
Comment: p_sort_frac used once
random_float_number 0000002C

Symbol: random_float_number
   Definitions
      At line 25 in file source_2.s
   Uses
      At line 19 in file source_2.s
Comment: random_float_number used once
save_float_series 00000010

Symbol: save_float_series
   Definitions
      At line 16 in file source_2.s
   Uses
      At line 23 in file source_2.s
Comment: save_float_series used once
shift_left 00000048

Symbol: shift_left
   Definitions
      At line 34 in file source_2.s
   Uses
      At line 30 in file source_2.s
Comment: shift_left used once
shift_right 00000050

Symbol: shift_right
   Definitions
      At line 38 in file source_2.s
   Uses
      At line 31 in file source_2.s
Comment: shift_right used once
sort_loop 00000084

Symbol: sort_loop
   Definitions
      At line 61 in file source_2.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 57 in file source_2.s
      At line 99 in file source_2.s
      At line 124 in file source_2.s
      At line 143 in file source_2.s
      At line 157 in file source_2.s
      At line 176 in file source_2.s

sorting 00000064

Symbol: sorting
   Definitions
      At line 51 in file source_2.s
   Uses
      At line 49 in file source_2.s
      At line 66 in file source_2.s
      At line 105 in file source_2.s
      At line 130 in file source_2.s
      At line 146 in file source_2.s
      At line 163 in file source_2.s
      At line 179 in file source_2.s

16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

final_result_series 00031190

Symbol: final_result_series
   Definitions
      At line 6 in file source_2.s
   Uses
      At line 183 in file source_2.s
Comment: final_result_series used once
float_number_series 00000450

Symbol: float_number_series
   Definitions
      At line 4 in file source_2.s
   Uses
      At line 12 in file source_2.s
      At line 52 in file source_2.s
      At line 182 in file source_2.s

sorted_number_series 00018AEC

Symbol: sorted_number_series
   Definitions
      At line 5 in file source_2.s
   Uses
      None
Comment: sorted_number_series unused
3 symbols
353 symbols in table
