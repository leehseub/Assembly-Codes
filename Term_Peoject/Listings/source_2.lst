


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             code_area, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000 00000450 
                       float_number_series
                               EQU              0x0450
    5 00000000 00018AEC 
                       sorted_number_series
                               EQU              0x00018AEC  ;101100
    6 00000000 00031190 
                       final_result_series
                               EQU              0x00031190  ;201104
    7 00000000         
    8 00000000         ;========== Do not change this area ===========
    9 00000000         
   10 00000000         initialization
   11 00000000 E59F0228        LDR              r0, =0xDEADBEEF ; seed for rand
                                                            om number
   12 00000004 E3A01E45        LDR              r1, =float_number_series
   13 00000008 E59F2224        LDR              r2, =10000  ; The number of ele
                                                            ment in stored sere
                                                            is
   14 0000000C E59F3224        LDR              r3, =0x0EACBA90 ; constant for 
                                                            random number
   15 00000010         
   16 00000010         save_float_series
   17 00000010 E3520000        CMP              r2, #0
   18 00000014 0A00000F        BEQ              is_init
   19 00000018 EB000003        BL               random_float_number
   20 0000001C E4810004        STR              r0, [r1], #4
   21 00000020 E2422001        SUB              r2, r2, #1
   22 00000024 E3A05000        MOV              r5, #0
   23 00000028 EAFFFFF8        B                save_float_series
   24 0000002C         
   25 0000002C         random_float_number
   26 0000002C E1A0500E        MOV              r5, LR
   27 00000030 E0200003        EOR              r0, r0, r3
   28 00000034 E0203163        EOR              r3, r0, r3, ROR #2 ; ex) 0000 1
                                                            011 -> 1100 0010
   29 00000038 E1500001        CMP              r0, r1
   30 0000003C AB000001        BLGE             shift_left
   31 00000040 BB000002        BLLT             shift_right
   32 00000044 E12FFF15        BX               r5
   33 00000048         
   34 00000048         shift_left
   35 00000048 E1A00080        LSL              r0, r0, #1
   36 0000004C E12FFF1E        BX               LR
   37 00000050         
   38 00000050         shift_right
   39 00000050 E1A000A0        LSR              r0, r0, #1
   40 00000054 E12FFF1E        BX               LR
   41 00000058         
   42 00000058         ;============================================
   43 00000058         
   44 00000058         ;========== Start your code here ===========
   45 00000058         
   46 00000058         is_init
   47 00000058 E3A01001        MOV              r1, #1
   48 0000005C E59FB1D0        LDR              r11, =10000



ARM Macro Assembler    Page 2 


   49 00000060 EAFFFFFF        B                sorting     ;Excepting function
                                                             of NaN
   50 00000064         
   51 00000064         sorting
   52 00000064 E3A00E45        LDR              r0, =float_number_series
   53 00000068 E1A0A101        MOV              r10, r1,LSL#2
   54 0000006C E1A0C001        MOV              r12, r1
   55 00000070 E080000A        ADD              r0, r0, r10
   56 00000074 E35B0000        CMP              r11, #0
   57 00000078 1A000001        BNE              sort_loop
   58 0000007C E35B0000        CMP              r11, #0
   59 00000080 0A000060        BEQ              is_str
   60 00000084         
   61 00000084         sort_loop
   62 00000084 E35C0000        CMP              r12, #0
   63 00000088 02811001        ADDEQ            r1, r1, #1
   64 0000008C         
   65 0000008C E35C0000        CMP              r12, #0
   66 00000090 0AFFFFF3        BEQ              sorting
   67 00000094         
   68 00000094 E5902000        LDR              r2, [r0]    ;r2 : key
   69 00000098         
   70 00000098 E1A04FA2        MOV              r4, r2, LSR#31 ;sign bit
   71 0000009C         
   72 0000009C E2400004        SUB              r0, r0, #4
   73 000000A0 E5903000        LDR              r3, [r0]
   74 000000A4         
   75 000000A4 E1A05FA3        MOV              r5, r3, LSR#31 ;sign bit
   76 000000A8         
   77 000000A8 E1540005        CMP              r4, r5
   78 000000AC         ;compare sign bit
   79 000000AC         ;GT : r2 = 1 & r3 = 0 (r2 is neg num & r3 is pos num)
   80 000000AC         ;LT : r2 = 0 & r3 = 1 (r2 is pos num & r3 is neg num)
   81 000000AC C5802000        STRGT            r2, [r0]    ;if key value is lo
                                                            wer than target swa
                                                            p two values
   82 000000B0 E1540005        CMP              r4, r5
   83 000000B4 C5803004        STRGT            r3, [r0,#4]
   84 000000B8 E1540005        CMP              r4, r5
   85 000000BC C24CC001        SUBGT            r12, r12, #1
   86 000000C0 E1540005        CMP              r4, r5
   87 000000C4 CAFFFFEE        BGT              sort_loop
   88 000000C8 E1540005        CMP              r4, r5
   89 000000CC B24BB001        SUBLT            r11, r11, #1
   90 000000D0 E1540005        CMP              r4, r5
   91 000000D4 B2811001        ADDLT            r1, r1, #1
   92 000000D8 E1540005        CMP              r4, r5
   93 000000DC BAFFFFE0        BLT              sorting     ;if key value is hi
                                                            gher than target, e
                                                            scape loop & compar
                                                            e next key
   94 000000E0         
   95 000000E0         ;if both are negative
   96 000000E0 E3540001        CMP              r4,#1
   97 000000E4 0A000001        BEQ              n_sort_exp
   98 000000E8         
   99 000000E8         ;if both are positive
  100 000000E8 E3540000        CMP              r4,#0
  101 000000EC 0A000022        BEQ              p_sort_exp



ARM Macro Assembler    Page 3 


  102 000000F0         
  103 000000F0         ;exponent compare function of two negative numbers
  104 000000F0         n_sort_exp
  105 000000F0 E1A04082        MOV              r4, r2, LSL#1
  106 000000F4 E1A04C24        MOV              r4, r4, LSR#24 ;exponent
  107 000000F8         
  108 000000F8 E1A05083        MOV              r5, r3, LSL#1
  109 000000FC E1A05C25        MOV              r5, r5, LSR#24 ;exponent
  110 00000100         
  111 00000100 E1540005        CMP              r4, r5      ;compare exponent
  112 00000104 C5802000        STRGT            r2, [r0]    ;if r2 has bigger e
                                                            xponent, swap them
  113 00000108 E1540005        CMP              r4, r5
  114 0000010C C5803004        STRGT            r3, [r0,#4]
  115 00000110 E1540005        CMP              r4, r5
  116 00000114 C24CC001        SUBGT            r12, r12, #1
  117 00000118 E1540005        CMP              r4, r5
  118 0000011C CAFFFFD8        BGT              sort_loop
  119 00000120 E1540005        CMP              r4, r5
  120 00000124 B24BB001        SUBLT            r11, r11, #1
  121 00000128 E1540005        CMP              r4, r5
  122 0000012C B2811001        ADDLT            r1, r1, #1  ;if r3 has bigger e
                                                            xponent, sort next 
                                                            key
  123 00000130 E1540005        CMP              r4, r5
  124 00000134 BAFFFFCA        BLT              sorting
  125 00000138 E1540005        CMP              r4, r5
  126 0000013C 0AFFFFFF        BEQ              n_sort_frac ;if exponents are s
                                                            ame, then compare f
                                                            raction
  127 00000140         
  128 00000140         ;fraction compare function of two negative numbers
  129 00000140         n_sort_frac
  130 00000140 E1A04482        MOV              r4, r2, LSL#9
  131 00000144 E1A044A4        MOV              r4, r4, LSR#9 ;fraction
  132 00000148         
  133 00000148 E1A05483        MOV              r5, r3, LSL#9
  134 0000014C E1A054A5        MOV              r5, r5, LSR#9 ;fraction
  135 00000150         
  136 00000150 E1540005        CMP              r4, r5
  137 00000154 C5802000        STRGT            r2, [r0]    ;if r2 is greater, 
                                                            swap them
  138 00000158 E1540005        CMP              r4, r5
  139 0000015C C4803004        STRGT            r3, [r0],#4
  140 00000160 E1540005        CMP              r4, r5
  141 00000164 C24CC001        SUBGT            r12, r12, #1
  142 00000168 E1540005        CMP              r4, r5
  143 0000016C CAFFFFC4        BGT              sort_loop
  144 00000170 E24BB001        SUB              r11, r11, #1
  145 00000174 E2811001        ADD              r1, r1, #1  ;if r3 is greater o
                                                            r Equal, sort next 
                                                            key
  146 00000178 EAFFFFB9        B                sorting
  147 0000017C         
  148 0000017C         ;exponent compare function of two positive numbers
  149 0000017C         p_sort_exp
  150 0000017C E1A04082        MOV              r4, r2, LSL#1
  151 00000180 E1A04C24        MOV              r4, r4, LSR#24 ;exponent
  152 00000184         



ARM Macro Assembler    Page 4 


  153 00000184 E1A05083        MOV              r5, r3, LSL#1
  154 00000188 E1A05C25        MOV              r5, r5, LSR#24 ;exponent
  155 0000018C         
  156 0000018C E1540005        CMP              r4, r5      ;compare exponent
  157 00000190 B5802000        STRLT            r2, [r0]    ;if exponent of r3 
                                                            is greater, swap th
                                                            em
  158 00000194 E1540005        CMP              r4, r5
  159 00000198 B5803004        STRLT            r3, [r0, #4]
  160 0000019C E1540005        CMP              r4, r5
  161 000001A0 B24CC001        SUBLT            r12, r12, #1
  162 000001A4 E1540005        CMP              r4, r5
  163 000001A8 BAFFFFB5        BLT              sort_loop
  164 000001AC E1540005        CMP              r4, r5
  165 000001B0 C24BB001        SUBGT            r11, r11, #1
  166 000001B4 E1540005        CMP              r4, r5
  167 000001B8 C2811001        ADDGT            r1, r1, #1  ;if exponent of r2 
                                                            is greater, sort ne
                                                            xt key
  168 000001BC E1540005        CMP              r4, r5
  169 000001C0 CAFFFFA7        BGT              sorting
  170 000001C4 E1540005        CMP              r4, r5
  171 000001C8 0AFFFFFF        BEQ              p_sort_frac ;if two exponents a
                                                            re same, compare fr
                                                            action
  172 000001CC         
  173 000001CC         ;fraction compare function of two positive numbers
  174 000001CC         p_sort_frac
  175 000001CC E1A04482        MOV              r4, r2, LSL#9
  176 000001D0 E1A044A4        MOV              r4, r4, LSR#9 ;fraction
  177 000001D4         
  178 000001D4 E1A05483        MOV              r5, r3, LSL#9
  179 000001D8 E1A054A5        MOV              r5, r5, LSR#9 ;fraction
  180 000001DC         
  181 000001DC E1540005        CMP              r4, r5
  182 000001E0 B5802000        STRLT            r2, [r0]    ;if fraction of r3 
                                                            is greater than r3,
                                                             swap
  183 000001E4 E1540005        CMP              r4, r5
  184 000001E8 B5803004        STRLT            r3, [r0,#4]
  185 000001EC E1540005        CMP              r4, r5
  186 000001F0 B24CC001        SUBLT            r12, r12, #1
  187 000001F4 E1540005        CMP              r4, r5
  188 000001F8 BAFFFFA1        BLT              sort_loop
  189 000001FC E24BB001        SUB              r11, r11, #1
  190 00000200 E2811001        ADD              r1, r1, #1  ;if fraction of r2 
                                                            is greater than or 
                                                            Equal to r2, sort n
                                                            ext key
  191 00000204 EAFFFF96        B                sorting
  192 00000208         
  193 00000208         is_str
  194 00000208 E3A00E45        LDR              r0, =float_number_series
  195 0000020C E59F1028        LDR              r1, =final_result_series
  196 00000210 E59F201C        LDR              r2, =10000
  197 00000214 EAFFFFFF        B                is_str_loop
  198 00000218         
  199 00000218         is_str_loop
  200 00000218 E3520000        CMP              r2, #0



ARM Macro Assembler    Page 5 


  201 0000021C 0A000003        BEQ              exit
  202 00000220         
  203 00000220 E4903004        LDR              r3, [r0], #4
  204 00000224 E4813004        STR              r3, [r1], #4
  205 00000228 E2422001        SUB              r2, r2, #1
  206 0000022C EAFFFFF9        B                is_str_loop
  207 00000230         
  208 00000230         exit
  209 00000230                 END
              DEADBEEF 
              00002710 
              0EACBA90 
              00031190 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\source_2.d -o.\objects\source_2.o -IC:\Keil_v5\ARM\RV31\INC 
--predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 538" --list=.\l
istings\source_2.lst source_2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

code_area 00000000

Symbol: code_area
   Definitions
      At line 1 in file source_2.s
   Uses
      None
Comment: code_area unused
exit 00000230

Symbol: exit
   Definitions
      At line 208 in file source_2.s
   Uses
      At line 201 in file source_2.s
Comment: exit used once
initialization 00000000

Symbol: initialization
   Definitions
      At line 10 in file source_2.s
   Uses
      None
Comment: initialization unused
is_init 00000058

Symbol: is_init
   Definitions
      At line 46 in file source_2.s
   Uses
      At line 18 in file source_2.s
Comment: is_init used once
is_str 00000208

Symbol: is_str
   Definitions
      At line 193 in file source_2.s
   Uses
      At line 59 in file source_2.s
Comment: is_str used once
is_str_loop 00000218

Symbol: is_str_loop
   Definitions
      At line 199 in file source_2.s
   Uses
      At line 197 in file source_2.s
      At line 206 in file source_2.s

n_sort_exp 000000F0

Symbol: n_sort_exp
   Definitions
      At line 104 in file source_2.s
   Uses
      At line 97 in file source_2.s
Comment: n_sort_exp used once
n_sort_frac 00000140




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: n_sort_frac
   Definitions
      At line 129 in file source_2.s
   Uses
      At line 126 in file source_2.s
Comment: n_sort_frac used once
p_sort_exp 0000017C

Symbol: p_sort_exp
   Definitions
      At line 149 in file source_2.s
   Uses
      At line 101 in file source_2.s
Comment: p_sort_exp used once
p_sort_frac 000001CC

Symbol: p_sort_frac
   Definitions
      At line 174 in file source_2.s
   Uses
      At line 171 in file source_2.s
Comment: p_sort_frac used once
random_float_number 0000002C

Symbol: random_float_number
   Definitions
      At line 25 in file source_2.s
   Uses
      At line 19 in file source_2.s
Comment: random_float_number used once
save_float_series 00000010

Symbol: save_float_series
   Definitions
      At line 16 in file source_2.s
   Uses
      At line 23 in file source_2.s
Comment: save_float_series used once
shift_left 00000048

Symbol: shift_left
   Definitions
      At line 34 in file source_2.s
   Uses
      At line 30 in file source_2.s
Comment: shift_left used once
shift_right 00000050

Symbol: shift_right
   Definitions
      At line 38 in file source_2.s
   Uses
      At line 31 in file source_2.s
Comment: shift_right used once
sort_loop 00000084

Symbol: sort_loop
   Definitions
      At line 61 in file source_2.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 57 in file source_2.s
      At line 87 in file source_2.s
      At line 118 in file source_2.s
      At line 143 in file source_2.s
      At line 163 in file source_2.s
      At line 188 in file source_2.s

sorting 00000064

Symbol: sorting
   Definitions
      At line 51 in file source_2.s
   Uses
      At line 49 in file source_2.s
      At line 66 in file source_2.s
      At line 93 in file source_2.s
      At line 124 in file source_2.s
      At line 146 in file source_2.s
      At line 169 in file source_2.s
      At line 191 in file source_2.s

16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

final_result_series 00031190

Symbol: final_result_series
   Definitions
      At line 6 in file source_2.s
   Uses
      At line 195 in file source_2.s
Comment: final_result_series used once
float_number_series 00000450

Symbol: float_number_series
   Definitions
      At line 4 in file source_2.s
   Uses
      At line 12 in file source_2.s
      At line 52 in file source_2.s
      At line 194 in file source_2.s

sorted_number_series 00018AEC

Symbol: sorted_number_series
   Definitions
      At line 5 in file source_2.s
   Uses
      None
Comment: sorted_number_series unused
3 symbols
353 symbols in table
